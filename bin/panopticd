#!/usr/bin/perl

use strict;
use Time::HiRes 'gettimeofday', 'tv_interval';
use FindBin::libs;
use PanopticCommon;

$0 =~ m"^(.*)/[^/]+$";
our $BASEDIR = "$1/..";

our $LIBDIR = "$BASEDIR/lib";
our $LOGDIR = "$BASEDIR/log";
our $CONFDIR = "$BASEDIR/conf";
our $RUNDIR = "$BASEDIR/run";
our $DIFFDIR = "$BASEDIR/spool/diff";
our $EVENTDIR = "$BASEDIR/spool/event";
our $POSTDIR = "$BASEDIR/spool/post";
our $DEBUG = 1;

if( @ARGV < 1 ){
	print "usage: % $0 {start|stop|status|oneshot}\n";
	exit 1;
}

####
sub read_panopticd_conf {
	my $conffile = "panopticd.conf";
	open F, '<', "$CONFDIR/$conffile" or die "$conffile: cannot open, stopped";
	my %config = (
		'detection_interval_minutes'    => 5,
		'cleanup_interval_minutes'      => 60,
		'working_file_preserve_minutes' => 1440,
	);
	while( <F> ){
		chomp;
		s{^\s*}{};
		next if m"^$";
		next if m"^#";
		my @c = split m"\s+";
		if( $c[0] eq "detection_interval_minutes" ){
			$config{'detection_interval_minutes'} = $c[1];
		}elsif( $c[0] eq "cleanup_interval_minutes" ){
			$config{'cleanup_interval_minutes'} = $c[1];
		}elsif( $c[0] eq "working_file_preserve_minutes" ){
			$config{'working_file_preserve_minutes'} = $c[1];
		}else{
			die;
		}
	}
	close F;

	return \%config;
}

####
sub mark_as_done ($) {
	my ( $src ) = @_;
	my $dstbase = $src;
	$dstbase =~ s/\.([^\.]*)$//;

	panopticddebug "mark_as_done: %s", $src;
	rename $src, "$dstbase.done" and return 1;
	panopticdlog "%s: cannot rename.", "$dstbase.done";

	foreach my $i ( 1..99 ){
		rename $src, "$dstbase.$i.done" and return 1;
		panopticdlog "%s: cannot rename.", "$dstbase.$i.done";
	}
	die;
}

sub exec_select ($) {
	my ( $timestamp ) = @_;
	my $outfile = "$DIFFDIR/diff_$timestamp.diff";
	my ($rc, $err) = execcmd( ["$LIBDIR/select.pl"], undef, $outfile );
	if( $rc ){
		panopticdlog "select.pl: rc=%d", $rc;
	}
	if( $err ){
		panopticdlog "select.pl: err=%s", $err;
	}
	unlink $outfile unless -s $outfile;
}

sub exec_detect ($) {
	my ( $timestamp ) = @_;
	my @diffs;
	my $outfile = "$EVENTDIR/event_$timestamp.event";
	opendir D, $DIFFDIR or die;
	while( readdir D ){
		next if m"^\.";
		next unless m"\.diff$";
		push @diffs, "$DIFFDIR/$_";
	}
	foreach( @diffs ){
		my ($rc, $err) = execcmd( ["$LIBDIR/detect.pl"], $_, $outfile );
		if( $rc ){
			panopticdlog "detect.pl: rc=%d", $rc;
		}else{
			mark_as_done $_;
		}
		if( $err ){
			panopticdlog "detect.pl: err=%s", $err;
		}
	}
	unlink $outfile unless -s $outfile;
}

sub exec_delivery ($) {
	my ( $timestamp ) = @_;
	my @events;
	opendir D, $EVENTDIR or die;
	while( readdir D ){
		next if m"^\.";
		next unless m"\.event$";
		push @events, "$EVENTDIR/$_";
	}
	push @events, '/dev/null' unless @events;
	foreach( @events ){
		my ($rc, $err) = execcmd( ["$LIBDIR/delivery.pl"], $_, undef );
		if( $rc ){
			panopticdlog "delivery.pl: rc=%d", $rc;
		}else{
			mark_as_done $_ unless $_ eq '/dev/null';
		}
		if( $err ){
			panopticdlog "delivery.pl: err=%s", $err;
		}
	}
}

sub exec_post ($) {
	my ( $timestamp ) = @_;
	my @envelopes;
	opendir D, $POSTDIR or die;
	while( readdir D ){
		next if m"^\.";
		next unless m"\.envelope$";
		push @envelopes, "$POSTDIR/$_";
	}
	foreach( @envelopes ){
		my ($rc, $err) = execcmd( ["$LIBDIR/post.pl"], $_, undef );
		if( $rc ){
			panopticdlog "post.pl: rc=%d", $rc;
		}else{
			mark_as_done $_;
		}
		if( $err ){
			panopticdlog "post.pl: err=%s", $err;
		}
	}
}

sub cleanup ($) {
	my ($minutes) = @_;
	my $expire = time - $minutes * 60;
	foreach my $d ($DIFFDIR, $EVENTDIR, $POSTDIR){
		opendir D, $d or next;
		my @f;
		while( my $f = readdir D ){
			next if $f =~ m"^\.";
			next unless $f =~ m"\.done$";
			my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
			    $atime,$mtime,$ctime,$blksize,$blocks) = stat "$d/$f";
			next unless $mtime < $expire;
			push @f, $f;
		}
		closedir D;

		foreach my $f (@f){
			panopticdlog "$d/$f: cannot unlink." unless unlink "$d/$f";
		}
	}
}

####
sub daemonize () {
	my $pid = fork;
	if( $pid ){
		$::SIG{'USR1'} = sub {
			open F, '>', "$RUNDIR/panopticd.pid" or die;
			print F "$pid\n";
			close F;
			exit 0;
		};
		sleep 5;
		exit 1;
	}else{
		my $ppid = getppid;
		open STDIN,  '<', '/dev/null' or die;
		open STDOUT, '>', '/dev/null' or die;
		open STDERR, '>', '/dev/null' or die;
		setpgrp 0, 0;
		kill 'USR1', $ppid or die;
	}
}

sub daemon_is_running () {
	return undef unless open F, '<', "$RUNDIR/panopticd.pid";
	my $pid = <F>;
	close F;
	return undef unless $pid > 1;
	return undef unless kill 0, $pid;
	return 1;
}

sub send_signal () {
	return undef unless open F, '<', "$RUNDIR/panopticd.pid";
	my $pid = <F>;
	close F;
	return kill 'TERM', $pid;
}

sub loop () {
	my $config = read_panopticd_conf();
	my $detection_interval_minutes = $config->{'detection_interval_minutes'};
	my $cleanup_interval_minutes = $config->{'cleanup_interval_minutes'};
	my $working_file_preserve_minutes = $config->{'working_file_preserve_minutes'};

	my $next_detection = time;
	my $next_cleanup = time;
	my $running = 1;

	panopticdlog "panopticd: daemon started.";
	$SIG{'TERM'} = sub {
		$running = undef;
		panopticdlog "panopticd: daemon received SIGTERM.";
	};
	while($running){
		if( $next_detection <= time ){
			my $timestamp = timestamp();
			my $t1 = [gettimeofday];
			exec_select( $timestamp );
			my $t2 = [gettimeofday];
			panopticdlog "panopticd: select.pl: %5.3f sec.", tv_interval($t1, $t2);
			exec_detect( $timestamp );
			my $t3 = [gettimeofday];
			panopticdlog "panopticd: detect.pl: %5.3f sec.", tv_interval($t2, $t3);
			exec_delivery( $timestamp );
			my $t4 = [gettimeofday];
			panopticdlog "panopticd: delivery.pl: %5.3f sec.", tv_interval($t3, $t4);
			exec_post( $timestamp );
			my $t5 = [gettimeofday];
			panopticdlog "panopticd: post.pl: %5.3f sec.", tv_interval($t4, $t5);
			$next_detection = time + $detection_interval_minutes * 60;
		}
		if( $next_cleanup <= time ){
			my $t1 = [gettimeofday];
			cleanup( $working_file_preserve_minutes );
			my $t2 = [gettimeofday];
			panopticdlog "panopticd: cleanup: %5.3f sec.", tv_interval($t1, $t2);
			$next_cleanup = time + $cleanup_interval_minutes * 60;
		}

		my $sleep = $next_detection < $next_cleanup ?
			$next_detection - time :
			$next_cleanup - time;
		$sleep = 30 if $sleep < 30;
		sleep $sleep;
	}

	panopticdlog "panopticd: daemon exited.";
	unlink "$RUNDIR/panopticd.pid" or
		panopticdlog "panopticd: cannot remove pidfile.";
	return 1;
}

sub start_daemon () {
	if( daemon_is_running ){
		print "panopticd: daemon is already running.\n";
		exit 0;
	}
	
	daemonize;
	unless( loop ){
		print "panopticd: error occurred in loop.\n";
		exit 1;
	}
	exit 0;
}

sub stop_daemon () {
	unless( daemon_is_running ){
		print "panopticd: daemon is not running yet.\n";
		exit 0;
	}
	unless( send_signal ){
		print "panopticd: cannot send signal.";
		exit 2;
	}
	exit 0;
}

sub oneshot () {
	my $config = read_panopticd_conf();
	my $timestamp = timestamp();
	exec_select( $timestamp );
	exec_detect( $timestamp );
	exec_delivery( $timestamp );
	exec_post( $timestamp );

	my $working_file_preserve_minutes = $config->{'working_file_preserve_minutes'};
	cleanup( $working_file_preserve_minutes );
	exit 0;
}


####
if    ( $ARGV[0] eq 'oneshot' ){
	oneshot;
}elsif( $ARGV[0] eq 'start' ){
	start_daemon;
}elsif( $ARGV[0] eq 'stop' ){
	stop_daemon;
}elsif( $ARGV[0] eq 'status' ){
	if( daemon_is_running ){
		print "panopticd: daemon is running.\n";
		exit 0;
	}else{
		print "panopticd: daemon is not running.\n";
		exit 1;
	}
}else{
	die "not implemented, stopped";
}
